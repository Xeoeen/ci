use super::Ui;
use commands::list_resources::Resource;
use error::Error;
use std::{path::Path, time::Duration};
use strres::StrRes;
use testing::TestResult;

pub struct None;
impl None {
	pub fn new() -> None {
		None
	}
}

impl Ui for None {
	fn read_auth(&mut self, _domain: &str) -> (String, String) {
		unimplemented!()
	}

	fn track_progress(&mut self, _verdict: &unijudge::Verdict) {}

	fn submit_success(&mut self, _id: String) {}

	fn print_resource_list(&mut self, _resources: &[Resource]) {}

	fn print_resource(&mut self, _data: &[u8]) {}

	fn print_test(&mut self, _outcome: &TestResult, _timing: Option<Duration>, _in_path: &Path, _output: Option<StrRes>) {}

	fn print_finish_test(&mut self, _success: bool) {}

	fn print_finish_init(&mut self) {}

	fn print_finish_tracksubmit(&mut self, _verdict: unijudge::Verdict) {}

	fn print_transpiled(&mut self, _compiled: &str) {}

	fn print_found_test(&mut self, _test_str: &str) {}

	fn print_error(&mut self, _error: Error) {}

	fn mt_generator_fail(&mut self, _i: i64) {}

	fn mt_autogenerated(&mut self, _i: i64) {}

	fn mt_good(&mut self, _t: Duration) {}

	fn mt_bad(&mut self, _t: Duration) {}

	fn mt_piece(&mut self, _result: &TestResult, _ti: Duration) {}

	fn mt_piece_ignored(&mut self) {}

	fn mt_piece_finish(&mut self) {}

	fn warn(&mut self, _message: &str) {}

	fn notice(&mut self, _message: &str) {}
}
